[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "shapleypy"
dynamic = ["version"]
description = 'Python library for cooperative game theory.'
readme = "README.md"
requires-python = ">=3.9"
license = "GPL-3.0"
keywords = []
authors = [
  { name = "Richard Muzik", email = "richard@imuzik.cz" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "numpy",
  "pplpy==0.8.9; platform_system != 'Windows'",
  "gmpy2==2.1.5; platform_system != 'Windows'",
  "cysignals==1.11.4; platform_system != 'Windows'",
  "pyfmtools==0.81; platform_system == 'Linux'",
]

[project.urls]
Documentation = "https://github.com/muzikr/Shapleypy#readme"
Issues = "https://github.com/muzikr/Shapleypy/issues"
Source = "https://github.com/muzikr/Shapleypy"

[tool.hatch.version]
path = "src/shapleypy/__about__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report -m",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy==1.9.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/ tests/}"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=24.1.0",
  "ruff>=0.2.1",
]
[tool.hatch.envs.lint.scripts]
style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff check --fix {args:.}",
  "style",
]

[tool.mypy]
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = false
pretty = true
show_column_numbers = true
show_error_codes = true
warn_no_return = true
warn_unused_ignores = true

[tool.black]
target-version = ["py39"]
line-length = 80
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 80
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore shadowing
  "A001", "A002",
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["shapleypy"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["shapleypy", "tests"]
branch = true
parallel = true
omit = [
  "src/shapleypy/__about__.py",
]

[tool.coverage.paths]
shapleypy = ["src/shapleypy", "*/shapleypy/src/shapleypy"]
tests = ["tests", "*/shapleypy/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
